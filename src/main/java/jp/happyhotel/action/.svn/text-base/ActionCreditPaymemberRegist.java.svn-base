package jp.happyhotel.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jp.happyhotel.common.BaseAction;
import jp.happyhotel.common.DateEdit;
import jp.happyhotel.common.GMOPayment;
import jp.happyhotel.common.Logging;
import jp.happyhotel.data.DataLoginInfo_M2;
import jp.happyhotel.data.DataUserBasic;
import jp.happyhotel.data.DataUserCredit;
import jp.happyhotel.data.DataUserCreditHistory;
import jp.happyhotel.user.UserCreditInfo;
import jp.happyhotel.user.UserPointPay;

import com.gmo_pg.g_pay.client.output.ErrHolder;
import com.gmo_pg.g_pay.client.output.SaveCardOutput;
import com.gmo_pg.g_pay.client.output.SaveMemberOutput;
import com.gmo_pg.g_pay.client.output.SearchMemberOutput;

/**
 * 
 * クレジット有料会員入会処理クラス
 * 
 * @author Y.Tanabe
 * @version 1.0 2011/11/07
 * @see "about_premium.jsp TOPﾍﾟｰｼﾞなどから最初にｱｸｾｽした際(ﾌﾟﾚﾐｱﾑｺｰｽ説明画面)"
 * @see "paymember_index.jsp ﾌﾟﾚﾐｱﾑｺｰｽ説明画面で会員登録ﾘﾝｸを選択した際"
 * @see "paymember_registration.jsp ｷｬﾘｱ登録が完了した際(非会員から入会の場合のみ)"
 * @see "paymember_complete.jsp 有料会員登録が完了した際"
 */
public class ActionCreditPaymemberRegist extends BaseAction
{
    public static final String                   CARDNO_EMPTY       = "カード番号が入力されていません。";
    public static final String                   CARDNO_ERROR       = "カード番号が正しくありません。";
    public static final String                   EXPIRE_EMPTY       = "有効期限が入力されていません。";
    public static final String                   EXPIRE_ERROR       = "有効期限が正しくありません。";
    public static final String                   CARDNO_UNKOWN      = "入力されたカード番号は存在しません。";
    public static final String                   OVER_CASH_ERROR    = "入力されたカードは残高不足です。";
    public static final String                   OVER_LIMIT_ERROR   = "入力されたカードは限度額オーバーしています。";
    public static final String                   UCTOUCH_CARD_ERROR = "入力されたカードはお取扱できません。";
    public static final String                   UNVALID_CARD_ERROR = "入力されたカードは無効です。";
    public static final String                   REGIST_CARD_ERROR  = "あなたのカード登録は既に完了しています。カードを変更したい場合はマイページより変更下さい。";
    public static final String                   REGIST_ERROR       = "ログインしてからやり直して下さい。";
    public static final String                   OTHER_ERROR        = "有料会員登録に失敗しました。クレジットカードの番号、有効期限もしくはカードが有効かどうかをご確認ください。";
    public static final int                      RS_MEMBER          = 9;                                                      // 正会員のRegistStatusの値
    public static final int                      REGIST_POINT       = 1000001;                                                // 有料入会ポイントのポイントコード

    // エラー詳細コード対応表
    private static final HashMap<String, String> ERROR_MAP          = new HashMap<String, String>(){
                                                                        {
                                                                            put( "E01170001", CARDNO_EMPTY );
                                                                            put( "E01170003", CARDNO_ERROR );
                                                                            put( "E01170006", CARDNO_ERROR );
                                                                            put( "E01170011", CARDNO_ERROR );
                                                                            put( "E01180001", EXPIRE_EMPTY );
                                                                            put( "E01180003", EXPIRE_ERROR );
                                                                            put( "E01180006", EXPIRE_ERROR );
                                                                            put( "42G830000", EXPIRE_ERROR );
                                                                            put( "E01240002", CARDNO_UNKOWN );
                                                                            put( "42G020000", OVER_CASH_ERROR );
                                                                            put( "42G040000", OVER_CASH_ERROR );
                                                                            put( "42G030000", OVER_LIMIT_ERROR );
                                                                            put( "42G050000", OVER_LIMIT_ERROR );
                                                                            put( "42G120000", UCTOUCH_CARD_ERROR );
                                                                            put( "42G220000", UCTOUCH_CARD_ERROR );
                                                                            put( "42G540000", UCTOUCH_CARD_ERROR );
                                                                            put( "42G600000", UCTOUCH_CARD_ERROR );
                                                                            put( "42G960000", UCTOUCH_CARD_ERROR );
                                                                            put( "42G970000", UCTOUCH_CARD_ERROR );
                                                                            put( "42G980000", UCTOUCH_CARD_ERROR );
                                                                            put( "42G990000", UCTOUCH_CARD_ERROR );
                                                                            put( "42G610000", UNVALID_CARD_ERROR );
                                                                        }
                                                                    };

    public void execute(HttpServletRequest request, HttpServletResponse response)
    {
        DataLoginInfo_M2 loginStatus = null;
        String token = "";
        String userid = "";
        // エラー表示リスト
        ArrayList<String> errorWordList = new ArrayList<String>();
        boolean successflag = false;
        String forwardUrl = "";
        RequestDispatcher requestDispatcher = null;

        try
        {
            loginStatus = (DataLoginInfo_M2)request.getAttribute( "LOGIN_INFO" );
            if ( loginStatus != null )
            {
                userid = loginStatus.getUserId();
            }
            // トークン未入力エラー
            if ( request.getParameter( "token" ) == null || request.getParameter( "token" ).equals( "" ) )
            {
                errorWordList.add( CARDNO_ERROR );
            }
            else
            {
                token = request.getParameter( "token" );
            }
            // エラーがなければ有料会員登録の実行
            if ( errorWordList.size() == 0 )
            {
                errorWordList = regist( userid, token );
            }
            // 処理が成功したか判定
            if ( errorWordList.size() > 0 )
            {
                successflag = false;
                forwardUrl = "mypage_credit_regist.jsp";
            }
            else
            {
                successflag = true;
                forwardUrl = "mypage_credit_regist_done.jsp";
            }
        }
        catch ( Exception e )
        {
            Logging.error( "ActionCreditPaymemberRegist.execute() Exception=" + e.toString() );
            successflag = false;
            forwardUrl = "credit_regist.jsp";
        }
        finally
        {
            // 履歴の追加
            createHistory( successflag, userid );
            // 表示エラー
            request.setAttribute( "errorlist", errorWordList );
            requestDispatcher = request.getRequestDispatcher( forwardUrl );
            try
            {
                requestDispatcher.forward( request, response );
            }
            catch ( ServletException e )
            {
            }
            catch ( IOException e )
            {
            }
        }

        return;
    }

    /**
     * 履歴作成処理
     * 
     * @param successflag 成否フラグ
     * @param userid ユーザID
     */
    private void createHistory(boolean successflag, String userid)
    {
        DataUserCreditHistory history = null;
        String errcode = "";
        String errdetailcode = "";

        try
        {
            // 履歴の追加
            history = new DataUserCreditHistory();
            history.setUser_id( userid );
            history.setCard_seq_no( 0 );
            history.setGenerate_date( Integer.parseInt( DateEdit.getDate( 2 ) ) );
            history.setGenerate_time( Integer.parseInt( DateEdit.getTime( 1 ) ) );
            if ( !successflag )
            {
                errcode = DataUserCreditHistory.COMMON_ERRORCODE;
                errdetailcode = DataUserCreditHistory.COMMON_ERRORDETAILCODE;
            }
            history.setError_code( errcode );
            history.setError_detail_code( errdetailcode );
            history.setHistory_status( DataUserCreditHistory.HISTORYTYPE_REGIST );
            // レコード追加
            history.insertData();
        }
        catch ( Exception e )
        {
            Logging.error( "ActionCreditPaymemberRegist.createHistory()  Exception=" + e.toString() );
        }
        finally
        {
        }
    }

    /**
     * 登録処理
     * 
     * @param userid ユーザID
     * @param cardNo カード番号
     * @param expire 有効期限
     * @return エラーメッセージリスト
     */
    private ArrayList<String> regist(String userid, String token)
    {
        ArrayList<String> ret = new ArrayList<String>();
        SaveMemberOutput memberOutput = null;
        SearchMemberOutput searchMemberOutput = null;
        SaveCardOutput cardOutput = null;
        List<ErrHolder> errList = null;
        DataUserBasic dub = null;
        UserCreditInfo creditInfo = null;
        DataUserCredit datausercredit = null;
        GMOPayment payment = new GMOPayment();
        UserPointPay upp = null;
        boolean firstflag = false;
        boolean updateflag = false;

        try
        {
            while( true )
            {
                // 会員チェック
                dub = new DataUserBasic();
                if ( !dub.getData( userid ) )
                {
                    ret.add( REGIST_ERROR );
                    break;
                }
                // カード登録がされているか確認(2重課金防止)
                creditInfo = new UserCreditInfo();
                if ( creditInfo.getPayMemberFlag( userid ) )
                {
                    // 既に有料会員のものはエラー表示
                    ret.add( REGIST_CARD_ERROR );
                    break;
                }
                // GMO会員登録
                searchMemberOutput = payment.GetSearchMember( userid );
                if ( searchMemberOutput == null )
                {
                    ret.add( OTHER_ERROR );
                    break;
                }
                // 会員情報が存在しなければ登録
                if ( searchMemberOutput.getMemberList().size() <= 0 )
                {
                    memberOutput = payment.ExecuteSaveMember( userid, "" );
                    if ( memberOutput == null )
                    {
                        ret.add( OTHER_ERROR );
                        break;
                    }
                    if ( memberOutput.isErrorOccurred() )
                    {
                        errList = memberOutput.getErrList();
                        // エラーがあれば以降の処理は行わない
                        if ( errList == null || errList.size() > 0 )
                        {
                            for( int i = 0 ; i < errList.size() ; i++ )
                            {
                                if ( ERROR_MAP.containsKey( errList.get( i ).getErrInfo() ) )
                                {
                                    ret.add( ERROR_MAP.get( errList.get( i ).getErrInfo() ) );
                                }
                                else
                                {
                                    ret.clear();
                                    ret.add( OTHER_ERROR );
                                    break;
                                }
                            }
                            break;
                        }
                        else
                        {
                            ret.add( OTHER_ERROR );
                            break;
                        }
                    }
                }
                // クレジットカード登録
                cardOutput = payment.ExecuteSaveCard( userid, 0, token, true );
                if ( cardOutput == null )
                {
                    ret.add( OTHER_ERROR );
                    break;
                }
                if ( cardOutput.isErrorOccurred() )
                {
                    // エラー時処理
                    errList = cardOutput.getErrList();
                    if ( errList == null || errList.size() > 0 )
                    {
                        for( int i = 0 ; i < errList.size() ; i++ )
                        {
                            if ( ERROR_MAP.containsKey( errList.get( i ).getErrInfo() ) )
                            {
                                ret.add( ERROR_MAP.get( errList.get( i ).getErrInfo() ) );
                            }
                            else
                            {
                                ret.clear();
                                ret.add( OTHER_ERROR );
                                break;
                            }
                        }
                        break;
                    }
                    else
                    {
                        ret.add( OTHER_ERROR );
                        break;
                    }
                }
                else
                {
                    int oldstatus = dub.getRegistStatus();
                    dub.setRegistStatusOld( oldstatus );
                    dub.setRegistStatus( RS_MEMBER );
                    dub.setRegistStatusPay( RS_MEMBER );
                    dub.setRegistDatePay( Integer.valueOf( DateEdit.getDate( 2 ) ) );
                    dub.setRegistTimePay( Integer.valueOf( DateEdit.getTime( 1 ) ) );
                    // ステータスを有料会員へ
                    if ( dub.updateData( userid ) )
                    {
                        upp = new UserPointPay();
                        // 成功したらポイント付与
                        firstflag = upp.setRegistPoint( userid, REGIST_POINT, 0, "" );
                        // クレジットデータ会員登録
                        // ユーザクレジットデータに追加
                        datausercredit = new DataUserCredit();
                        // 携帯有料会員だった人の為にレコードなければ初回課金フラグを有効にする
                        if ( creditInfo.getUserCreditCount( userid ) <= 0 )
                        {
                            firstflag = true;
                        }
                        // 全く同じカード連番の場合は更新する
                        if ( datausercredit.getData( userid, cardOutput.getCardSeq() ) )
                        {
                            // 更新
                            updateflag = true;
                        }
                        else
                        {
                            // 新規
                            updateflag = false;
                        }
                        datausercredit.setUser_id( userid );
                        datausercredit.setCard_seq_no( cardOutput.getCardSeq() );
                        datausercredit.setRegist_date( Integer.valueOf( DateEdit.getDate( 2 ) ) );
                        datausercredit.setRegist_time( Integer.valueOf( DateEdit.getTime( 1 ) ) );
                        if ( firstflag )
                        {
                            datausercredit.setCharge_flag( DataUserCredit.CHARGEFLAG_FIRSTPAY );
                        }
                        else
                        {
                            datausercredit.setCharge_flag( DataUserCredit.CHARGEFLAG_PAY );
                        }
                        datausercredit.setDel_flag( 0 );
                        // レコード追加
                        if ( updateflag )
                        {
                            if ( !datausercredit.updateData() )
                            {
                                Logging.error( "[ActionCreditPaymemberRegist.regist()]: 無料会員から有料会員" );
                                ret.add( OTHER_ERROR );
                            }
                        }
                        else
                        {
                            if ( !datausercredit.insertData() )
                            {
                                Logging.error( "[ActionCreditPaymemberRegist.regist()] :無料会員から有料会員" );
                                ret.add( OTHER_ERROR );
                            }
                            else
                            {
                                // 退会予約済みの会員を取得
                                datausercredit = creditInfo.getUnRegistReserveMember( userid );
                                if ( datausercredit != null )
                                {
                                    datausercredit.setCharge_flag( 0 );
                                    if ( !datausercredit.updateData() )
                                    {
                                        Logging.error( "[ActionCreditPaymemberRegist.regist()] :退会予約会員の再登録時" );
                                        ret.add( OTHER_ERROR );
                                    }
                                }
                            }
                        }
                    }
                    break;
                }
            }
        }
        catch ( Exception e )
        {
            Logging.error( "ActionCreditPaymemberRegist.regist() Exception=" + e.toString() );
            ret.add( OTHER_ERROR );
        }

        return(ret);
    }
}
