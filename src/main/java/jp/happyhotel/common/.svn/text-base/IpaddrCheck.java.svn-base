package jp.happyhotel.common;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import com.sun.dhcpmgr.data.IPAddress;
import com.sun.dhcpmgr.data.Network;
import com.sun.dhcpmgr.data.ValidationException;

/****
 * 
 * @author tashiro-s1
 * @see os-networkmgr-utils.jarをビルドパスに追加してください。
 */
public class IpaddrCheck
{

    /**
     * IPアドレスの範囲内チェック
     * 
     * @param checkIp チェックを行うIPアドレス
     * @param filepath ファイルパス
     * @return
     */
    public boolean withinIp(String checkIp, String filepath)
    {
        boolean ret = true;
        int count = 0;
        ArrayList<String> strIpAddrRange = null;
        String strIpaddr = "";
        String strSubNet = "";

        try
        {
            strIpAddrRange = this.getIpAddr( filepath );
            for( int i = 0 ; i < strIpAddrRange.size() ; i++ )
            {
                strIpaddr = this.substringIpAddr( strIpAddrRange.get( i ) );
                strSubNet = this.getSubmask( strIpAddrRange.get( i ) );
                Logging.info( "ipaddr:" + strIpaddr );
                Logging.info( "subnet:" + strSubNet );

                Network network = new Network( strIpaddr, strSubNet );
                IPAddress ipAddr = new IPAddress( checkIp );
                if ( network.containsAddress( ipAddr ) )
                {
                }
                else
                {
                    count++;
                }

            }
            if ( count > 0 )
            {
                ret = false;
            }
        }
        catch ( ValidationException e )
        {
            ret = false;
            Logging.error( "[IpaddrCheck.withinIp()] ValidationException:" + e.toString() );
        }
        return(ret);
    }

    /***
     * IPアドレスの取得
     * 
     * @param filepath ファイルパス
     * @return
     */
    private ArrayList<String> getIpAddr(String filepath)
    {
        int count = 0;
        ArrayList<String> strIpAddr = new ArrayList<String>();
        try
        {
            File file = new File( filepath );
            BufferedReader br = new BufferedReader( new FileReader( file ) );

            String str;
            while( (str = br.readLine()) != null )
            {
                strIpAddr.add( str );
                Logging.info( str );
            }
            br.close();
        }
        catch ( FileNotFoundException e )
        {
            Logging.error( "[IpaddrCheck.getIpaddr] FileNotFoundException:" + e );
        }
        catch ( IOException e )
        {
            Logging.error( "[IpaddrCheck.getIpaddr] IOException:" + e );
        }
        return(strIpAddr);
    }

    /***
     * IPアドレスを抜き出す
     * 
     * @param strIpaddr
     * @return
     */
    public String substringIpAddr(String strIpaddr)
    {
        int n = 0;
        n = strIpaddr.indexOf( "/" );
        strIpaddr = strIpaddr.substring( 0, n );
        return(strIpaddr);
    }

    /***
     * サブネットマスクの抜出
     * 
     * @param strMask
     * @return
     */
    public String getSubmask(String strMask)
    {
        int n = 0;
        String strIpaddr = "";

        // "/"移行の文字列を抜き出す
        n = strMask.indexOf( "/" );
        if ( n > 0 )
        {
            strMask = strMask.substring( n + 1 );

            switch( Integer.parseInt( strMask ) )
            {
                case 32:
                    strIpaddr = "255.255.255.255";
                    break;

                case 31:
                    strIpaddr = "255.255.255.254";
                    break;

                case 30:
                    strIpaddr = "255.255.255.252";
                    break;

                case 29:
                    strIpaddr = "255.255.255.248";
                    break;

                case 28:
                    strIpaddr = "255.255.255.240";
                    break;

                case 27:
                    strIpaddr = "255.255.255.224";
                    break;

                case 26:
                    strIpaddr = "255.255.255.192";
                    break;

                case 25:
                    strIpaddr = "255.255.255.128";
                    break;

                case 24:
                    strIpaddr = "255.255.255.0";
                    break;

                case 23:
                    strIpaddr = "255.255.254.0";
                    break;

                case 22:
                    strIpaddr = "255.255.252.0";
                    break;

                case 21:
                    strIpaddr = "255.255.248.0";
                    break;

                case 20:
                    strIpaddr = "255.255.240.0";
                    break;
            }
        }

        return(strIpaddr);

    }
}
