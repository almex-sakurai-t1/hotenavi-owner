package jp.happyhotel.common;

import java.sql.ResultSet;
import java.sql.SQLException;

public abstract class SQLStatementImpl implements java.sql.PreparedStatement
{

    SQLStatementImpl()
    {
        super();
    }

    public boolean execute(String sql) throws SQLException
    {
        getConnection().setReadOnly( checkSelectQuery( sql ) );
        return false;
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException
    {
        // TODO 自動生成されたメソッド・スタブ
        return false;
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException
    {
        // TODO 自動生成されたメソッド・スタブ
        return false;
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException
    {
        // TODO 自動生成されたメソッド・スタブ
        return false;
    }

    public int[] executeBatch() throws SQLException
    {
        // TODO 自動生成されたメソッド・スタブ
        return null;
    }

    public ResultSet executeQuery(String sql) throws SQLException
    {
        Logging.info( "SQLStatementImpl executeQuery(query)=" + sql );
        Logging.info( "SQLStatementImpl executeQuery(check)=" + checkSelectQuery( sql ) );
        Logging.info( "SQLStatementImpl executeQuery(connection)=" + getConnection() );
        getConnection().setReadOnly( checkSelectQuery( sql ) );
        return null;
    }

    public int executeUpdate(String sql) throws SQLException
    {
        getConnection().setReadOnly( checkSelectQuery( sql ) );
        return 0;
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException
    {
        // TODO 自動生成されたメソッド・スタブ
        return 0;
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException
    {
        // TODO 自動生成されたメソッド・スタブ
        return 0;
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException
    {
        // TODO 自動生成されたメソッド・スタブ
        return 0;
    }

    private boolean checkSelectQuery(String query)
    {
        if ( query.toLowerCase().indexOf( "select" ) >= 0 )
        {
            return(true);
        }
        else
        {
            return(false);
        }
    }

}
