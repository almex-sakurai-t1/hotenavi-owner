package jp.happyhotel.util;

import java.util.Date;

import org.apache.commons.lang.StringUtils;

import com.nimbusds.jwt.JWTClaimsSet;

/**
 * アクセストークン処理クラス<br>
 * <br>
 * アクセストークン関連の機能をまとめたユーテリティクラスです。<br>
 * アクセストークンの発行や検証の機能を提供します。<br>
 * <br>
 * トークンの秘密鍵はプロパティファイル（token.properties）内に設定してください。<br>
 * プロパティファイルはクラスと同じ階層に配置しておく必要があります。<br>
 * <br>
 * 例：<br>
 * &emsp;{@code accessTokenSecretKey=<256-bit (32-byte) string>}<br>
 * 
 * @author koshiba-y1
 */
public final class AccessToken
{
    /** 共有秘密鍵 */
    private static final String SECRET_KEY    = PropertyReader.readStr( "accessTokenSecretKey", "token", AccessToken.class.getResource( "" ) );

    /** トークン発行者情報 */
    private static final String ISSUER        = "happyhotel.jp";

    /** JWTクレーム用文字列（ユーザID） */
    public static final String  USER_ID_CLAIM = "user_id";

    /**
     * コンストラクタ
     */
    private AccessToken()
    {
    }

    /**
     * アクセストークン発行<br>
     * <br>
     * 現在時刻から指定時間だけ有効なアクセストークンを発行します。<br>
     * アクセストークンには、発行者、発行日時、有効期限、ユーザIDが格納されます。<br>
     * 
     * @param userId ユーザID
     * @param minute トークンを有効にする期間（分）
     * @return アクセストークン
     * @throws IllegalArgumentException JWSオブジェクトに署名できなかった場合
     */
    public static String issue(String userId, long minute)
    {
        Date nowDate = new Date();

        JWTClaimsSet claimsSet = new JWTClaimsSet.Builder()
                .issuer( ISSUER )
                .issueTime( nowDate )
                .expirationTime( new Date( nowDate.getTime() + (minute * 60 * 1000) ) )
                .claim( USER_ID_CLAIM, userId )
                .build();

        return JsonWebToken.issue( claimsSet, SECRET_KEY );
    }

    /**
     * アクセストークン発行<br>
     * <br>
     * 現在時刻から1時間だけ有効なアクセストークンを発行します。<br>
     * アクセストークンには、発行者、発行日時、有効期限、ユーザIDが格納されます。<br>
     * 
     * @param userId ユーザID
     * @return アクセストークン
     * @throws IllegalArgumentException JWSオブジェクトに署名できなかった場合
     */
    public static String issue(String userId)
    {
        long minute = 60;
        return issue( userId, minute );
    }

    /**
     * アクセストークン検証<br>
     * <br>
     * 下記項目により、アクセストークンを検証します。<br>
     * ・正しい秘密鍵でエンコードされているかどうか<br>
     * ・発行者が正しく設定されているかどうか<br>
     * ・発行日時が設定されているかどうか<br>
     * ・有効期限が設定されているかどうか（有効期限内かどうかは検証対象外）<br>
     * ・ユーザIDが設定されているかどうか<br>
     * 
     * @param token アクセストークン
     * @return 検証結果を示すブール値
     */
    public static boolean verify(String token)
    {
        // 秘密鍵による検証
        if ( !JsonWebToken.verifyBySecretKey( token, SECRET_KEY ) )
        {
            return false;
        }

        // ハピホテが発行したトークンかどうかの検証
        if ( !JsonWebToken.verifyByIssuer( token, ISSUER ) )
        {
            return false;
        }

        // 発行日時が設定されているかどうかの検証
        if ( !JsonWebToken.verifyByIssueTime( token ) )
        {
            return false;
        }

        // 有効期限が設定されているかどうかの検証
        if ( !JsonWebToken.verifyByExpirationTime( token ) )
        {
            return false;
        }

        // ユーザIDが設定されているかどうかの検証
        if ( !verifyByUserId( token ) )
        {
            return false;
        }

        return true;
    }

    /**
     * 有効期限判定 <br>
     * <br>
     * アクセストークンの有効期限を判定します。<br>
     * アクセストークンが正しいものかどうかは検証されません。<br>
     * 有効期限が設定されていない、もしくは取得に失敗した場合、IllegalArgumentExceptionを投げます。<br>
     * 例外の発生を回避したい場合は、{@link #verify(String token)}を用いて事前にアクセストークンの検証を行ってください。<br>
     * 
     * @param token アクセストークン
     * @return アクセストークンが有効期限内かどうかを示すブール値
     * @throws IllegalArgumentException アクセストークンに有効期限が設定されていない、もしくは取得に失敗した場合
     */
    public static boolean isWithinExpirationTime(String token)
    {
        return JsonWebToken.isWithinExpirationTime( token );
    }

    /**
     * ユーザID取得<br>
     * <br>
     * アクセストークンに格納されているユーザIDを取得します。<br>
     * アクセストークンが正しいものかどうかは検証されません。<br>
     * ユーザIDが格納されていない（空文字を含む）、もしくは取得に失敗した場合、IllegalArgumentExceptionを投げます。<br>
     * 例外の発生を回避したい場合は、{@link #verify(String token)}を用いて事前にアクセストークンの検証を行ってください。<br>
     * 
     * @param token アクセストークン
     * @return ユーザID
     * @throws IllegalArgumentException アクセストークンにユーザIDが設定されていない、もしくは取得に失敗した場合
     */
    public static String getUserId(String token)
    {
        String userId = JsonWebToken.getStringClaim( token, USER_ID_CLAIM );

        if ( StringUtils.isEmpty( userId ) )
        {
            throw new IllegalArgumentException( "tokenにはユーザIDが設定されていません。" );
        }

        return userId;
    }

    /**
     * アクセストークン検証（ユーザID）<br>
     * <br>
     * アクセストークンにユーザIDが設定されているかどうかを検証します。<br>
     * ユーザIDがnullもしくは空文字の場合、設定されていないものと判定されます。<br>
     * 
     * @param token アクセストークン
     * @return アクセストークンにユーザIDが設定されているかどうかを示すブール値
     */
    public static boolean verifyByUserId(String token)
    {
        try
        {
            String userId = JsonWebToken.getStringClaim( token, USER_ID_CLAIM );

            if ( StringUtils.isEmpty( userId ) )
            {
                return false;
            }

            return true;
        }
        catch ( Exception e )
        {
            return false;
        }
    }
}
